package asymmetric;

import java.util.HashSet;

import util.MathUtil;

/**
 * Discrete logarithm use case.
 * 
 * @author Ashkan Moatamed
 */
public class D2Q1 {
	/**
	 * Dependencies: <code>
	 * 		1. util.MathUtil
	 * </code>
	 */

	/**
	 * Prevent instantiation.
	 */
	private D2Q1() {
		// Empty by design.
	}

	public static void main(String[] args) {
		// Compute discrete logarithm of 3 to bases 2 and 5 mod 11.
		System.out.println(
				"Discrete logarithm of 3 to base 2 mod 11 is: " + MathUtil.discreteLogLinearSearch(2, 3, 11) + ".\n");
		System.out.println(
				"Discrete logarithm of 3 to base 5 mod 11 is: " + MathUtil.discreteLogLinearSearch(5, 3, 11) + ".\n");

		/*
		 * 11 is prime so to show 2 is a primitive root, we must show that the subgroup generated by 2 has
		 * order 10.
		 */
		final HashSet<Integer> subgroup = new HashSet<Integer>(10);
		for (int i = 0, power = 1; i != 10; ++i) {
			power = (power * 2) % 11;
			subgroup.add(power);
		}
		System.out.println("2 is" + ((subgroup.size() == 10) ? "" : " not") + " a primitive root of 11.\n");
	}
}
