package asymmetric;

import java.util.HashSet;

import util.MathUtil;

/**
 * Discrete logarithm use case.
 * 
 * @author Ashkan Moatamed
 */
public class D2Q1 {
	/**
	 * Dependencies: <code>
	 * 		1. util.MathUtil
	 * </code>
	 */

	/**
	 * Prevent instantiation.
	 */
	private D2Q1() {
		// Empty by design.
	}

	/**
	 * @param base
	 *            the given base
	 * 
	 * @param target
	 *            the given target
	 * 
	 * @param modulus
	 *            the given modulus
	 * 
	 * @return <code>p</code> such that <code>base<sup>p</sup> (mod modulus) == target</code> if such a
	 *         <code>p</code> exists and <code>null</code> otherwise.
	 * 
	 * @throws ArithmeticException
	 *             If <code>modulus <= 0</code>
	 */
	public static final Integer discreteLog(int base, int target, int modulus) throws ArithmeticException {
		base = MathUtil.mod(base, modulus);
		target = MathUtil.mod(target, modulus);

		// Handle the simple special case.
		if (target == 1) {
			// base to the power of 0 is 1 except when base is 0.
			return ((base == 0) ? null : 0);
		}

		// Iteratively compute base to the power of (i + 1) and compare it to target.
		final int maxI = modulus - 1;
		for (int i = 0, power = 1; i != maxI; ++i) { // Loops from i = 0 to i = modulus - 2.
			power = (power * base) % modulus;
			if (power == target) {
				return (i + 1);
			}
		}
		// No (integer) power of base from [1, modulus - 1] resulted in target.
		return null;
	}

	public static void main(String[] args) {
		// Compute discrete logarithm of 3 to bases 2 and 5 mod 11.
		System.out.println("Discrete logarithm of 3 to base 2 mod 11 is: " + D2Q1.discreteLog(2, 3, 11) + ".\n");
		System.out.println("Discrete logarithm of 3 to base 5 mod 11 is: " + D2Q1.discreteLog(5, 3, 11) + ".\n");

		// 11 is prime so to show 2 is a primitive root, must show subgroup generated by 2 has order 11.
		final HashSet<Integer> subgroup = new HashSet<Integer>(10);
		for (int i = 0, power = 1; i != 10; ++i) {
			power = (power * 2) % 11;
			subgroup.add(power);
		}
		System.out.println("2 is" + ((subgroup.size() == 10) ? "" : " not") + " a primitive root of 11.\n");
	}
}
